{"version":3,"sources":["webpack:///./node_modules/@bit/zhuiks.lcbot.global-types/dist/globalTypes.js","webpack:///./src/components/song-slide/index.tsx","webpack:///./src/components/song.js"],"names":["SlideType","Slide","styled","div","props","type","CHORUS","SlideTitle","h3","Line","p","slideType","Repeat","span","SongSlide","slide","name","lines","map","str","replace","indexOf","query","SongTitle","h1","SongPage","slides","text","data","pageContext","song","songList","songBegining","find","sl","length","line","join","songInfo","songId","id","forEach","encodeURIComponent","reduce","acc","val","youtube","links","pdf","title","description","i","displaySlide","key"],"mappings":"oIAAWA,E,0DAEX,SAAWA,GACTA,EAAkB,OAAI,SACtBA,EAAkB,OAAI,SACtBA,EAAiB,MAAI,QACrBA,EAAe,IAAI,MACnBA,EAAe,IAAI,MACnBA,EAAgB,KAAI,OACpBA,EAAiB,MAAI,QAPvB,CAQGA,IAAcA,EAAY,KCH7B,IAAMC,EAAQC,IAAOC,IAAV,oEAAGD,CAAH,uFAKW,SAAAE,GAAK,OAAIA,EAAMC,OAASL,EAAUM,OAAS,UAAY,iBAEvEC,EAAaL,IAAOM,GAAV,yEAAGN,CAAH,uEASVO,EAAOP,IAAOQ,EAAV,mEAAGR,CAAH,yEAIgB,SAAAE,GAAK,OAAIA,EAAMO,YAAcX,EAAUM,OAAS,MAAQ,OAE5EM,EAASV,IAAOW,KAAV,qEAAGX,CAAH,8SA2CGY,EAnB6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChC,kBAACd,EAAD,CAAOI,KAAMU,EAAMV,MACdU,EAAMC,MACH,kBAACT,EAAD,KAAaQ,EAAMC,MAEnBD,EAAME,OAASF,EAAME,MAAMC,KAAI,SAAAC,GAAG,OAC9B,kBAACV,EAAD,CAAME,UAAWI,EAAMV,MAClBc,EAAIC,QAAQ,WAAY,KACD,IAAvBD,EAAIE,QAAQ,MACT,kBAACT,EAAD,YACyB,IAAvBO,EAAIE,QAAQ,OACd,kBAACT,EAAD,Y,sCCxDzB,IAAMU,EAAK,aAiBZC,EAAYrB,IAAOsB,GAAV,sEAAGtB,CAAH,wBA0CAuB,UAvBE,SAAC,GAA2B,IAfzBC,EACdC,EAccC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAClBC,EAAOF,EAAKG,SAASD,KACrBE,EAAeF,EAAKJ,OAAOO,MAAK,SAAAC,GAAE,OAAIA,EAAGjB,OAASiB,EAAGjB,MAAMkB,UAC9DlB,MAAMC,KAAI,SAAAkB,GAAI,OAAEA,EAAKhB,QAAQ,WAAY,OACzCiB,KAAK,OACFC,EAAW,CACfC,OAAQT,EAAKU,GACbb,MAtBgBD,EAsBEI,EAAKJ,OArBrBC,EAAO,GACXD,EAAOe,SAAQ,SAAA1B,GACTY,IACFA,GAAQe,mBAAmB,OAE7Bf,GAAQe,mBAAmB,QAAU3B,EAAMC,MAAQD,EAAMV,MAAQ,MAC7DU,EAAME,OAASF,EAAME,MAAMkB,SAC7BR,GAAQZ,EAAME,MAAM0B,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMF,mBAAmBG,EAAM,aAG5ElB,GAAQe,mBAAmB,OAYzBI,QAAShB,EAAKiB,OAASjB,EAAKiB,MAAM,GAClCC,IAAKnB,EAAYmB,KAEnB,OACE,kBAAC,IAAD,CAAQV,SAAUA,GAChB,kBAAC,IAAD,CAAKW,MAAOnB,EAAKmB,MAAOC,YAAa,iBAAuBlB,EAAcO,OAAQT,EAAKU,KACvF,kBAACjB,EAAD,KAAYO,EAAKmB,OAChBnB,EAAKJ,OAAOR,KAAI,SAACH,EAAOoC,GACvB,IAAMC,EAAerC,EAAME,OAASF,EAAME,MAAMkB,OAASpB,EAAQe,EAAKJ,OAAOO,MAAK,SAAAC,GAAE,OAAIA,EAAG7B,OAASU,EAAMV,MAAQ6B,EAAGjB,OAASiB,EAAGjB,MAAMkB,UACvI,OAAO,kBAAC,EAAD,CAAWkB,IAAKF,EAAGpC,MAAOqC","file":"component---src-components-song-js-2e9a0247178ed295aa78.js","sourcesContent":["export var SlideType;\n\n(function (SlideType) {\n  SlideType[\"BRIDGE\"] = \"BRIDGE\";\n  SlideType[\"CHORUS\"] = \"CHORUS\";\n  SlideType[\"INTRO\"] = \"INTRO\";\n  SlideType[\"OUT\"] = \"OUT\";\n  SlideType[\"PRE\"] = \"PRE\";\n  SlideType[\"SOLO\"] = \"SOLO\";\n  SlideType[\"VERSE\"] = \"VERSE\";\n})(SlideType || (SlideType = {}));","import React from 'react'\nimport { SlideInput, SlideType } from '@bit/zhuiks.lcbot.global-types'\nimport styled from 'styled-components'\n\ninterface SlideProps {\n  readonly type: SlideType\n}\nconst Slide = styled.div<SlideProps>`\n  position: relative;\n  z-index: 0;\n  margin: 0 -1em;\n  padding: 0.6em 1em;\n  background-color: ${props => props.type === SlideType.CHORUS ? '#f5f5f5' : 'transparent'};\n`\nconst SlideTitle = styled.h3`\n  position: absolute;\n  color: #cccccc;\n  top: 0;\n  margin-inline-start: -0.4em;\n`\ninterface LineProps {\n  readonly slideType: SlideType\n}  \nconst Line = styled.p<LineProps>`\n  margin: 0;\n  min-height: 1em;\n  position: relative;\n  padding-inline-start: ${props => props.slideType === SlideType.CHORUS ? '1em' : '0'};\n`\nconst Repeat = styled.span`\n  position: absolute;\n  height: 100%;\n  z-index: -1;\n  width: 1.5em;\n  color: #cccccc;\n  font-size: 0.7em;\n  line-height: 0.7em;\n  top: 0;\n  inset-block-start: 0;\n  left: 0;\n  inset-inline-end: 0;\n  border-inline-start: 2px solid #cccccc;\n  padding-inline-start: 5px;\n  padding-block-start: 1em;\n  padding-block-end: 3px;\n  display: flex;\n  align-items: flex-end;\n`\n\ninterface SongSlideProps {\n    slide: SlideInput\n}\n\nconst SongSlide: React.FC<SongSlideProps> = ({ slide }) => (\n            <Slide type={slide.type}>\n                {slide.name &&\n                    <SlideTitle>{slide.name}</SlideTitle>}\n                {\n                    slide.lines && slide.lines.map(str => (\n                        <Line slideType={slide.type}>\n                            {str.replace(/\\|:|:\\|/g, '')}\n                            {str.indexOf(':|') !== -1 ? (\n                                <Repeat>2x</Repeat>\n                            ) : ( str.indexOf('|:') !== -1 &&\n                                <Repeat/>\n                            )}\n                        </Line>\n                    ))\n                }\n            </Slide>\n)\n\nexport default SongSlide;\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Layout from \"./layout\"\nimport SEO from \"./seo\"\nimport SongSlide from \"./song-slide\"\n\nexport const query = graphql`\n  query($songId: ID!) {\n    songList {\n      song(id: $songId) {\n        id\n        title\n        slides {\n          type\n          name\n          lines\n        }\n        links\n      }\n    }\n  }\n`\n\nconst SongTitle = styled.h1`\n  text-align: center;\n`\n\nconst slides2text = slides => {\n  let text = ''\n  slides.forEach(slide => {\n    if (text) {\n      text += encodeURIComponent('\\n')\n    }\n    text += encodeURIComponent('    ' + (slide.name || slide.type) + '\\n')\n    if (slide.lines && slide.lines.length) {\n      text += slide.lines.reduce((acc, val) => acc + encodeURIComponent(val + '\\n'))\n    }\n  })\n  text += encodeURIComponent('\\n')\n  return text\n}\n\nconst SongPage = ({ data, pageContext }) => {\n  const song = data.songList.song\n  const songBegining = song.slides.find(sl => sl.lines && sl.lines.length )\n    .lines.map(line=>line.replace(/\\|:|:\\|/g, ''))\n    .join(' - ')\n  const songInfo = {\n    songId: song.id,\n    text: slides2text(song.slides),\n    youtube: song.links && song.links[0],\n    pdf: pageContext.pdf,\n  }\n  return (\n    <Layout songInfo={songInfo}>\n      <SEO title={song.title} description={\"كلمات ترنيمة\" + \": \"+ songBegining} songId={song.id} />\n      <SongTitle>{song.title}</SongTitle>\n      {song.slides.map((slide, i) => {\n        const displaySlide = slide.lines && slide.lines.length ? slide : song.slides.find(sl => sl.type === slide.type && sl.lines && sl.lines.length )\n        return <SongSlide key={i} slide={displaySlide} />\n      })}\n    </Layout>\n  )\n}\n\nexport default SongPage\n"],"sourceRoot":""}